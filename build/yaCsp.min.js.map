{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","yaCsp.min.js","src/services/cspWrap.service.js","src/yaCsp.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","WrapService","$q","$window","$filter","this","q","window","filter","loaded","array","index","resIndex","result","cadesplugin","CAPICOM_CURRENT_USER_STORE","CAPICOM_MY_STORE","CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED","CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME","CADESCOM_CADES_BES","CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN","certSubjectName","certValidFrom","cnPosition","indexOf","commaPosition","cn","substring","title","self","_loadPlugin","oStore","oCerts","CreateObjectAsync","then","store","Open","Certificates","certs","Count","count","reject","promises","currentDate","Date","push","resolve","oCert","certDate","certIsValid","Item","cert","ValidToDate","date","IsValid","validator","Result","isValid","HasPrivateKey","hasPrivateKey","SubjectName","subjectName","_getCertDescription","all","list","_compact","dataToSign","arguments","undefined","oSigner","oSignedData","Find","signer","propset_Certificate","signerData","propset_Content","propset_Options","SignCades","signature","Close","$inject","2","_interopRequireDefault","obj","__esModule","default","_cspWrap","_cspWrap2","angular","service","./services/cspWrap.service"],"mappings":"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","file":"yaCsp.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * Сервис подписания\r\n * Использует CryptoPro CSP и плагин для него\r\n * @see {@link http://www.cryptopro.ru/sites/default/files/products/cades/demopage/main.html}\r\n */\n\nvar WrapService = function () {\n  /**\r\n   * @param  {Object} $q\r\n   * @param  {Object} $window\r\n   * @return {WrapService}\r\n   */\n\n  function WrapService($q, $window, $filter) {\n    _classCallCheck(this, WrapService);\n\n    this.q = $q;\n    this.window = $window;\n    this.filter = $filter;\n    // Инициализирован ли плагин\n    this.loaded = false;\n  }\n\n  /**\r\n  * Creates an array with all falsey values removed. The values `false`, `null`,\r\n  * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\r\n  *\r\n  * @see {@link https://github.com/lodash/lodash/blob/4.11.2/lodash.js#L6017}\r\n  */\n\n\n  _createClass(WrapService, [{\n    key: '_compact',\n    value: function _compact(array) {\n      var index = -1,\n          length = array ? array.length : 0,\n          resIndex = 0,\n          result = [];\n\n      while (++index < length) {\n        var value = array[index];\n        if (value) {\n          result[resIndex++] = value;\n        }\n      }\n      return result;\n    }\n\n    /**\r\n     * Инициализация переменных для работы с плагином\r\n     * @private\r\n     */\n\n  }, {\n    key: '_loadPlugin',\n    value: function _loadPlugin() {\n      // Плагин для подписания\n      this.cadesplugin = this.window.cadesplugin;\n      // Хранилище текущего пользователя\n      this.CAPICOM_CURRENT_USER_STORE = this.cadesplugin.CAPICOM_CURRENT_USER_STORE;\n      // Хранилище персональных сертификатов пользователя\n      this.CAPICOM_MY_STORE = this.cadesplugin.CAPICOM_MY_STORE;\n      // Открывает хранилище на чтение/запись, если пользователь имеет права на чтение/запись.\n      // Если прав на запись нет, то хранилище открывается за чтение\n      this.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = this.cadesplugin.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED;\n      // Возвращает сертификаты, наименование которого точно или частично совпадает с указанным\n      this.CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME = this.cadesplugin.CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME;\n      // Тип подписи CAdES BES\n      this.CADESCOM_CADES_BES = this.cadesplugin.CADESCOM_CADES_BES;\n      // Сохранять полную цепочку\n      this.CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN = this.cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN;\n      // Флаг загрузенности\n      this.loaded = true;\n    }\n\n    /**\r\n     * @typedef CertifiateDescription\r\n     * @type Object\r\n     * @property {String} title\r\n     * @property {String} cn\r\n     */\n    /**\r\n     * Собирает описание сертификата\r\n     * @param  {String} certSubjectName\r\n     * @param  {Date} certValidFrom\r\n     * @return {CertifiateDescription}\r\n     */\n\n  }, {\n    key: '_getCertDescription',\n    value: function _getCertDescription(certSubjectName, certValidFrom) {\n      var cnPosition = certSubjectName.indexOf('CN=');\n      var commaPosition = certSubjectName.indexOf(',', cnPosition);\n      var cn = certSubjectName.substring(cnPosition + 3, commaPosition);\n      return {\n        title: cn + '; Выдан ' + this.filter('date')(certValidFrom, 'dd.MM.yyyy'),\n        cn: certSubjectName\n      };\n    }\n\n    /**\r\n     * Получение списка сертификатов пользователя\r\n     * @return {Promise.<{}>}\r\n     */\n\n  }, {\n    key: 'getCertsList',\n    value: function getCertsList() {\n      var self = this;\n      if (!this.loaded) {\n        this._loadPlugin();\n      }\n      // Хранилище сертификатов\n      var oStore = void 0;\n      // Список сертификатов в пользовательском хранилище\n      var oCerts = void 0;\n      return self.cadesplugin.CreateObjectAsync(\"CAPICOM.Store\").then(function (store) {\n        oStore = store;\n        // Открываем соединение\n        oStore.Open(self.CAPICOM_CURRENT_USER_STORE, self.CAPICOM_MY_STORE, self.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);\n        // Вычитываем сертификаты\n        return oStore.Certificates;\n      }).then(function (certs) {\n        oCerts = certs;\n        // Полчучаем кол-во доступных сертификатов\n        return certs.Count;\n      }).then(function (count) {\n        // Проверяем что есть доступные сертификаты\n        if (!count) {\n          return self.q.reject('No certs found');\n        }\n        // Массив обработчиков для каждого сертификата\n        var promises = [];\n        // Теукщая дата\n        var currentDate = new Date();\n        // Для ускорения получения информации о сертификат\n        // делаем всё через массив промисов\n        /*jshint loopfunc: true */\n        for (var i = 1; i <= count; i++) {\n          (function (i) {\n            promises.push(self.q(function (resolve, reject) {\n              var oCert = void 0;\n              var certDate = void 0;\n              var certIsValid = void 0;\n              return oCerts.Item(i).then(function (cert) {\n                oCert = cert;\n                // Вытаскиваем дату окончания сертфиката\n                return oCert.ValidToDate;\n              }).then(function (date) {\n                certDate = new Date(date);\n                // Валидатор сертификата\n                return oCert.IsValid();\n              })\n              // Результат валидности\n              .then(function (validator) {\n                return validator.Result;\n              }).then(function (isValid) {\n                certIsValid = isValid;\n                // Проверяем есть ли у сертификата закрытый ключ\n                return oCert.HasPrivateKey();\n              }).then(function (hasPrivateKey) {\n                if (hasPrivateKey && certIsValid && currentDate < certDate) {\n                  return oCert.SubjectName.then(function (subjectName) {\n                    return resolve(self._getCertDescription(subjectName, certDate));\n                  });\n                }\n                return resolve(null);\n              });\n            }));\n          })(i);\n        }\n        return self.q.all(promises).then(function (list) {\n          return self._compact(list);\n        });\n      });\n    }\n\n    /**\r\n     * Подписать\r\n     * @param  {String} certSubjectName Наиманование сертификата\r\n     * @param  {String} dataToSign Данные для подписи\r\n     * @return {Promise.<String>} Подпись\r\n     */\n\n  }, {\n    key: 'sign',\n    value: function sign() {\n      var dataToSign = arguments.length <= 0 || arguments[0] === undefined ? 'Hello World' : arguments[0];\n      var certSubjectName = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];\n\n      var self = this;\n      if (!this.loaded) {\n        this._loadPlugin();\n      }\n      // Хранилище сертификатов\n      var oStore = void 0;\n      // Список сертификатов в пользовательском хранилище\n      var oCerts = void 0;\n      // Выбранный сертификат\n      var oCert = void 0;\n      // Подписыватель\n      var oSigner = void 0;\n      // Подписанные данные\n      var oSignedData = void 0;\n      // Создаём соединение с хранилищем сертификатов\n      return self.cadesplugin.CreateObjectAsync(\"CAPICOM.Store\").then(function (store) {\n        oStore = store;\n        // Открываем соединение\n        oStore.Open(self.CAPICOM_CURRENT_USER_STORE, self.CAPICOM_MY_STORE, self.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);\n        // Вычитываем сертификаты\n        return oStore.Certificates;\n      }).then(function (certs) {\n        // Если есть параметр для фильтрации - ищем\n        return !certSubjectName ? certs : certs.Find(CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME, certSubjectName);\n      }).then(function (certs) {\n        oCerts = certs;\n        // Полчучаем кол-во доступных сертификатов\n        return certs.Count;\n      }).then(function (count) {\n        // Проверяем что есть доступные сертификаты\n        if (!count) {\n          return self.q.reject('No certs found');\n        }\n        // И что особо выбора у нас нет\n        if (count > 1) {\n          return self.q.reject('Specify certificate name. Found: ' + count + ' certs');\n        }\n        return self.q.resolve();\n      })\n      // Берём первый сертификат\n      .then(function () {\n        return oCerts.Item(1);\n      }).then(function (cert) {\n        oCert = cert;\n      })\n      // Создаём объект подписи\n      .then(function () {\n        return self.cadesplugin.CreateObjectAsync('CAdESCOM.CPSigner');\n      }).then(function (signer) {\n        oSigner = signer;\n        // Указываем какой сертификат использовать\n        return oSigner.propset_Certificate(oCert);\n      })\n      // Создаём объект подписанный данных\n      .then(function () {\n        return self.cadesplugin.CreateObjectAsync('CAdESCOM.CadesSignedData');\n      }).then(function (signerData) {\n        oSignedData = signerData;\n        // Указываем что надо подписать\n        return oSignedData.propset_Content(dataToSign);\n      })\n      // Устанавливаем дополнительные параметры подписания\n      .then(function () {\n        return oSigner.propset_Options(self.CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN);\n      })\n      // Подписываем данные\n      .then(function () {\n        return oSignedData.SignCades(oSigner, self.CADESCOM_CADES_BES);\n      }).then(function (signature) {\n        // Закрываем соединение\n        oStore.Close();\n        // Возвращаем подпись\n        return signature;\n      });\n    }\n  }]);\n\n  return WrapService;\n}();\n\n// Injection\n\n\nWrapService.$inject = ['$q', '$window', '$filter'];\n\nexports.default = WrapService;\n\n},{}],2:[function(require,module,exports){\n'use strict';\n\nvar _cspWrap = require('./services/cspWrap.service');\n\nvar _cspWrap2 = _interopRequireDefault(_cspWrap);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nangular.module('ya.csp', []).service('ya.csp.WrapService', _cspWrap2.default);\n\n},{\"./services/cspWrap.service\":1}]},{},[2])\n\n","/**\r\n * Сервис подписания\r\n * Использует CryptoPro CSP и плагин для него\r\n * @see {@link http://www.cryptopro.ru/sites/default/files/products/cades/demopage/main.html}\r\n */\r\nclass WrapService {\r\n  /**\r\n   * @param  {Object} $q\r\n   * @param  {Object} $window\r\n   * @return {WrapService}\r\n   */\r\n  constructor($q, $window, $filter) {\r\n    this.q = $q;\r\n    this.window = $window;\r\n    this.filter = $filter;\r\n    // Инициализирован ли плагин\r\n    this.loaded = false;\r\n  }\r\n\r\n  /**\r\n  * Creates an array with all falsey values removed. The values `false`, `null`,\r\n  * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\r\n  *\r\n  * @see {@link https://github.com/lodash/lodash/blob/4.11.2/lodash.js#L6017}\r\n  */\r\n  _compact(array) {\r\n    var index = -1,\r\n        length = array ? array.length : 0,\r\n        resIndex = 0,\r\n        result = [];\r\n\r\n    while (++index < length) {\r\n      var value = array[index];\r\n      if (value) {\r\n        result[resIndex++] = value;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Инициализация переменных для работы с плагином\r\n   * @private\r\n   */\r\n  _loadPlugin() {\r\n    // Плагин для подписания\r\n    this.cadesplugin = this.window.cadesplugin;\r\n    // Хранилище текущего пользователя\r\n    this.CAPICOM_CURRENT_USER_STORE = this.cadesplugin.CAPICOM_CURRENT_USER_STORE;\r\n    // Хранилище персональных сертификатов пользователя\r\n    this.CAPICOM_MY_STORE = this.cadesplugin.CAPICOM_MY_STORE;\r\n    // Открывает хранилище на чтение/запись, если пользователь имеет права на чтение/запись.\r\n    // Если прав на запись нет, то хранилище открывается за чтение\r\n    this.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = this.cadesplugin.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED;\r\n    // Возвращает сертификаты, наименование которого точно или частично совпадает с указанным\r\n    this.CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME = this.cadesplugin.CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME;\r\n    // Тип подписи CAdES BES\r\n    this.CADESCOM_CADES_BES = this.cadesplugin.CADESCOM_CADES_BES;\r\n    // Сохранять полную цепочку\r\n    this.CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN = this.cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN;\r\n    // Флаг загрузенности\r\n    this.loaded = true;\r\n  }\r\n\r\n  /**\r\n   * @typedef CertifiateDescription\r\n   * @type Object\r\n   * @property {String} title\r\n   * @property {String} cn\r\n   */\r\n  /**\r\n   * Собирает описание сертификата\r\n   * @param  {String} certSubjectName\r\n   * @param  {Date} certValidFrom\r\n   * @return {CertifiateDescription}\r\n   */\r\n  _getCertDescription(certSubjectName, certValidFrom) {\r\n    const cnPosition = certSubjectName.indexOf('CN=');\r\n    const commaPosition = certSubjectName.indexOf(',', cnPosition);\r\n    const cn = certSubjectName.substring(cnPosition + 3, commaPosition);\r\n    return {\r\n      title: `${cn}; Выдан ${this.filter('date')(certValidFrom, 'dd.MM.yyyy')}`,\r\n      cn: certSubjectName\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Получение списка сертификатов пользователя\r\n   * @return {Promise.<{}>}\r\n   */\r\n  getCertsList() {\r\n    const self = this;\r\n    if (!this.loaded) {\r\n      this._loadPlugin();\r\n    }\r\n    // Хранилище сертификатов\r\n    let oStore;\r\n    // Список сертификатов в пользовательском хранилище\r\n    let oCerts;\r\n    return self.cadesplugin.CreateObjectAsync(\"CAPICOM.Store\")\r\n      .then(store => {\r\n        oStore = store;\r\n        // Открываем соединение\r\n        oStore.Open(self.CAPICOM_CURRENT_USER_STORE, self.CAPICOM_MY_STORE,\r\n          self.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);\r\n        // Вычитываем сертификаты\r\n        return oStore.Certificates;\r\n      })\r\n      .then(certs => {\r\n        oCerts = certs;\r\n        // Полчучаем кол-во доступных сертификатов\r\n        return certs.Count;\r\n      })\r\n      .then(count => {\r\n        // Проверяем что есть доступные сертификаты\r\n        if (!count) {\r\n          return self.q.reject('No certs found');\r\n        }\r\n        // Массив обработчиков для каждого сертификата\r\n        const promises = [];\r\n        // Теукщая дата\r\n        const currentDate = new Date();\r\n        // Для ускорения получения информации о сертификат\r\n        // делаем всё через массив промисов\r\n        /*jshint loopfunc: true */\r\n        for (let i = 1; i <= count; i++) {\r\n          (function (i) {\r\n            promises.push(self.q((resolve, reject) => {\r\n              let oCert;\r\n              let certDate;\r\n              let certIsValid;\r\n              return oCerts.Item(i)\r\n                .then(cert => {\r\n                  oCert = cert;\r\n                  // Вытаскиваем дату окончания сертфиката\r\n                  return oCert.ValidToDate;\r\n                })\r\n                .then(date => {\r\n                  certDate = new Date(date);\r\n                  // Валидатор сертификата\r\n                  return oCert.IsValid();\r\n                })\r\n                // Результат валидности\r\n                .then(validator => validator.Result)\r\n                .then(isValid => {\r\n                  certIsValid = isValid;\r\n                  // Проверяем есть ли у сертификата закрытый ключ\r\n                  return oCert.HasPrivateKey();\r\n                })\r\n                .then(hasPrivateKey => {\r\n                  if (hasPrivateKey && certIsValid && currentDate < certDate) {\r\n                    return oCert.SubjectName\r\n                      .then(subjectName => {\r\n                        return resolve(self._getCertDescription(subjectName, certDate));\r\n                      });\r\n                  }\r\n                  return resolve(null);\r\n                });\r\n            }));\r\n          }(i));\r\n        }\r\n        return self.q.all(promises)\r\n          .then(list => self._compact(list));\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Подписать\r\n   * @param  {String} certSubjectName Наиманование сертификата\r\n   * @param  {String} dataToSign Данные для подписи\r\n   * @return {Promise.<String>} Подпись\r\n   */\r\n  sign(dataToSign = 'Hello World', certSubjectName = '') {\r\n    const self = this;\r\n    if (!this.loaded) {\r\n      this._loadPlugin();\r\n    }\r\n    // Хранилище сертификатов\r\n    let oStore;\r\n    // Список сертификатов в пользовательском хранилище\r\n    let oCerts;\r\n    // Выбранный сертификат\r\n    let oCert;\r\n    // Подписыватель\r\n    let oSigner;\r\n    // Подписанные данные\r\n    let oSignedData;\r\n    // Создаём соединение с хранилищем сертификатов\r\n    return self.cadesplugin.CreateObjectAsync(\"CAPICOM.Store\")\r\n      .then(store => {\r\n        oStore = store;\r\n        // Открываем соединение\r\n        oStore.Open(self.CAPICOM_CURRENT_USER_STORE, self.CAPICOM_MY_STORE,\r\n          self.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED);\r\n        // Вычитываем сертификаты\r\n        return oStore.Certificates;\r\n      })\r\n      .then(certs => {\r\n        // Если есть параметр для фильтрации - ищем\r\n        return (!certSubjectName) ?\r\n          certs : certs.Find(CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME, certSubjectName);\r\n      })\r\n      .then((certs) => {\r\n        oCerts = certs;\r\n        // Полчучаем кол-во доступных сертификатов\r\n        return certs.Count;\r\n      })\r\n      .then(count => {\r\n        // Проверяем что есть доступные сертификаты\r\n        if (!count) {\r\n          return self.q.reject('No certs found');\r\n        }\r\n        // И что особо выбора у нас нет\r\n        if (count > 1) {\r\n          return self.q.reject(`Specify certificate name. Found: ${count} certs`);\r\n        }\r\n        return self.q.resolve();\r\n      })\r\n      // Берём первый сертификат\r\n      .then(() => oCerts.Item(1))\r\n      .then(cert => {\r\n        oCert = cert;\r\n      })\r\n      // Создаём объект подписи\r\n      .then(() => self.cadesplugin.CreateObjectAsync('CAdESCOM.CPSigner'))\r\n      .then(signer => {\r\n        oSigner = signer;\r\n        // Указываем какой сертификат использовать\r\n        return oSigner.propset_Certificate(oCert);\r\n      })\r\n      // Создаём объект подписанный данных\r\n      .then(() => self.cadesplugin.CreateObjectAsync('CAdESCOM.CadesSignedData'))\r\n      .then(signerData => {\r\n        oSignedData = signerData;\r\n        // Указываем что надо подписать\r\n        return oSignedData.propset_Content(dataToSign);\r\n      })\r\n      // Устанавливаем дополнительные параметры подписания\r\n      .then(() => oSigner.propset_Options(self.CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN))\r\n      // Подписываем данные\r\n      .then(() => oSignedData.SignCades(oSigner, self.CADESCOM_CADES_BES))\r\n      .then(signature => {\r\n        // Закрываем соединение\r\n        oStore.Close();\r\n        // Возвращаем подпись\r\n        return signature;\r\n      });\r\n  }\r\n}\r\n\r\n// Injection\r\nWrapService.$inject = ['$q', '$window', '$filter'];\r\n\r\nexport default WrapService;\r\n","import WrapService from './services/cspWrap.service';\r\n\r\nangular.module('ya.csp', [])\r\n  .service('ya.csp.WrapService', WrapService);\r\n"],"sourceRoot":"/source/"}